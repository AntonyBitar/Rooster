class CreatComboModel {
  List<Items>? items;
  String? code;

  CreatComboModel({this.items, this.code});

  CreatComboModel.fromJson(Map<String, dynamic> json) {
    if (json['items'] != null) {
      items = <Items>[];
      json['items'].forEach((v) {
        items!.add(new Items.fromJson(v));
      });
    }
    code = json['code'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.items != null) {
      data['items'] = this.items!.map((v) => v.toJson()).toList();
    }
    data['code'] = this.code;
    return data;
  }
}

class Items {
  int? id;
  int? companyId;
  Null? warehouseId;
  int? itemTypeId;
  int? categoryId;
  String? itemName;
  String? mainCode;
  int? printMainCode;
  String? shortDescription;
  int? showOnPos;
  String? mainDescription;
  String? secondLanguageDescription;
  int? taxationGroupId;
  int? subrefId;
  int? canBeSold;
  int? canBePurchased;
  int? warranty;
  Null? lastAllowedPurchaseDate;
  int? unitCost;
  int? decimalCost;
  int? quantity;
  double? unitPrice;
  int? decimalPrice;
  int? lineDiscountLimit;
  int? packageId;
  int? defaultTransactionPackageId;
  String? packageUnitName;
  Null? packageUnitQuantity;
  String? packageSetName;
  String? packageSetQuantity;
  String? packageSupersetName;
  String? packageSupersetQuantity;
  Null? packagePaletteName;
  Null? packagePaletteQuantity;
  Null? packageContainerName;
  Null? packageContainerQuantity;
  int? decimalQuantity;
  int? currencyId;
  int? priceCurrencyId;
  int? posCurrencyId;
  int? isBlocked;
  int? active;
  int? autoGeneratedCode;
  String? createdAt;
  String? updatedAt;
  Null? deletedAt;
  String? taxRate;
  String? totalQuantities;
  List<Warehouses>? warehouses;
  TaxationGroup? taxationGroup;

  Items({
    this.id,
    this.companyId,
    this.warehouseId,
    this.itemTypeId,
    this.categoryId,
    this.itemName,
    this.mainCode,
    this.printMainCode,
    this.shortDescription,
    this.showOnPos,
    this.mainDescription,
    this.secondLanguageDescription,
    this.taxationGroupId,
    this.subrefId,
    this.canBeSold,
    this.canBePurchased,
    this.warranty,
    this.lastAllowedPurchaseDate,
    this.unitCost,
    this.decimalCost,
    this.quantity,
    this.unitPrice,
    this.decimalPrice,
    this.lineDiscountLimit,
    this.packageId,
    this.defaultTransactionPackageId,
    this.packageUnitName,
    this.packageUnitQuantity,
    this.packageSetName,
    this.packageSetQuantity,
    this.packageSupersetName,
    this.packageSupersetQuantity,
    this.packagePaletteName,
    this.packagePaletteQuantity,
    this.packageContainerName,
    this.packageContainerQuantity,
    this.decimalQuantity,
    this.currencyId,
    this.priceCurrencyId,
    this.posCurrencyId,
    this.isBlocked,
    this.active,
    this.autoGeneratedCode,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
    this.taxRate,
    this.totalQuantities,
    this.warehouses,
    this.taxationGroup,
  });

  Items.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    companyId = json['company_id'];
    warehouseId = json['warehouse_id'];
    itemTypeId = json['item_type_id'];
    categoryId = json['category_id'];
    itemName = json['item_name'];
    mainCode = json['main_code'];
    printMainCode = json['print_main_code'];
    shortDescription = json['short_description'];
    showOnPos = json['show_on_pos'];
    mainDescription = json['main_description'];
    secondLanguageDescription = json['second_language_description'];
    taxationGroupId = json['taxation_group_id'];
    subrefId = json['subref_id'];
    canBeSold = json['can_be_sold'];
    canBePurchased = json['can_be_purchased'];
    warranty = json['warranty'];
    lastAllowedPurchaseDate = json['last_allowed_purchase_date'];
    unitCost = json['unit_cost'];
    decimalCost = json['decimal_cost'];
    quantity = json['quantity'];
    unitPrice = json['unit_price'];
    decimalPrice = json['decimal_price'];
    lineDiscountLimit = json['line_discount_limit'];
    packageId = json['package_id'];
    defaultTransactionPackageId = json['default_transaction_package_id'];
    packageUnitName = json['package_unit_name'];
    packageUnitQuantity = json['package_unit_quantity'];
    packageSetName = json['package_set_name'];
    packageSetQuantity = json['package_set_quantity'];
    packageSupersetName = json['package_superset_name'];
    packageSupersetQuantity = json['package_superset_quantity'];
    packagePaletteName = json['package_palette_name'];
    packagePaletteQuantity = json['package_palette_quantity'];
    packageContainerName = json['package_container_name'];
    packageContainerQuantity = json['package_container_quantity'];
    decimalQuantity = json['decimal_quantity'];
    currencyId = json['currency_id'];
    priceCurrencyId = json['price_currency_id'];
    posCurrencyId = json['pos_currency_id'];
    isBlocked = json['is_blocked'];
    active = json['active'];
    autoGeneratedCode = json['auto_generated_code'];
    createdAt = json['created_at'];
    updatedAt = json['updated_at'];
    deletedAt = json['deleted_at'];
    taxRate = json['tax_rate'];
    totalQuantities = json['total_quantities'];
    if (json['warehouses'] != null) {
      warehouses = <Warehouses>[];
      json['warehouses'].forEach((v) {
        warehouses!.add(new Warehouses.fromJson(v));
      });
    }
    taxationGroup =
        json['taxation_group'] != null
            ? new TaxationGroup.fromJson(json['taxation_group'])
            : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['company_id'] = this.companyId;
    data['warehouse_id'] = this.warehouseId;
    data['item_type_id'] = this.itemTypeId;
    data['category_id'] = this.categoryId;
    data['item_name'] = this.itemName;
    data['main_code'] = this.mainCode;
    data['print_main_code'] = this.printMainCode;
    data['short_description'] = this.shortDescription;
    data['show_on_pos'] = this.showOnPos;
    data['main_description'] = this.mainDescription;
    data['second_language_description'] = this.secondLanguageDescription;
    data['taxation_group_id'] = this.taxationGroupId;
    data['subref_id'] = this.subrefId;
    data['can_be_sold'] = this.canBeSold;
    data['can_be_purchased'] = this.canBePurchased;
    data['warranty'] = this.warranty;
    data['last_allowed_purchase_date'] = this.lastAllowedPurchaseDate;
    data['unit_cost'] = this.unitCost;
    data['decimal_cost'] = this.decimalCost;
    data['quantity'] = this.quantity;
    data['unit_price'] = this.unitPrice;
    data['decimal_price'] = this.decimalPrice;
    data['line_discount_limit'] = this.lineDiscountLimit;
    data['package_id'] = this.packageId;
    data['default_transaction_package_id'] = this.defaultTransactionPackageId;
    data['package_unit_name'] = this.packageUnitName;
    data['package_unit_quantity'] = this.packageUnitQuantity;
    data['package_set_name'] = this.packageSetName;
    data['package_set_quantity'] = this.packageSetQuantity;
    data['package_superset_name'] = this.packageSupersetName;
    data['package_superset_quantity'] = this.packageSupersetQuantity;
    data['package_palette_name'] = this.packagePaletteName;
    data['package_palette_quantity'] = this.packagePaletteQuantity;
    data['package_container_name'] = this.packageContainerName;
    data['package_container_quantity'] = this.packageContainerQuantity;
    data['decimal_quantity'] = this.decimalQuantity;
    data['currency_id'] = this.currencyId;
    data['price_currency_id'] = this.priceCurrencyId;
    data['pos_currency_id'] = this.posCurrencyId;
    data['is_blocked'] = this.isBlocked;
    data['active'] = this.active;
    data['auto_generated_code'] = this.autoGeneratedCode;
    data['created_at'] = this.createdAt;
    data['updated_at'] = this.updatedAt;
    data['deleted_at'] = this.deletedAt;
    data['tax_rate'] = this.taxRate;
    data['total_quantities'] = this.totalQuantities;
    if (this.warehouses != null) {
      data['warehouses'] = this.warehouses!.map((v) => v.toJson()).toList();
    }
    if (this.taxationGroup != null) {
      data['taxation_group'] = this.taxationGroup!.toJson();
    }
    return data;
  }
}

class Warehouses {
  int? id;
  String? warehouseNumber;
  String? name;
  String? qtyOnHand;
  QtyInDefaultPackaging? qtyInDefaultPackaging;
  String? type;
  Pivot? pivot;

  Warehouses({
    this.id,
    this.warehouseNumber,
    this.name,
    this.qtyOnHand,
    this.qtyInDefaultPackaging,
    this.type,
    this.pivot,
  });

  Warehouses.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    warehouseNumber = json['warehouse_number'];
    name = json['name'];
    qtyOnHand = json['qty_on_hand'];
    qtyInDefaultPackaging =
        json['qty_in_default_packaging'] != null
            ? new QtyInDefaultPackaging.fromJson(
              json['qty_in_default_packaging'],
            )
            : null;
    type = json['type'];
    pivot = json['pivot'] != null ? new Pivot.fromJson(json['pivot']) : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['warehouse_number'] = this.warehouseNumber;
    data['name'] = this.name;
    data['qty_on_hand'] = this.qtyOnHand;
    if (this.qtyInDefaultPackaging != null) {
      data['qty_in_default_packaging'] = this.qtyInDefaultPackaging!.toJson();
    }
    data['type'] = this.type;
    if (this.pivot != null) {
      data['pivot'] = this.pivot!.toJson();
    }
    return data;
  }
}

class QtyInDefaultPackaging {
  Null? containerName;
  int? containerQty;
  Null? paletteName;
  int? paletteQty;
  String? supersetName;
  int? supersetQty;
  String? setName;
  int? setQty;
  String? unitName;
  String? unitQty;

  QtyInDefaultPackaging({
    this.containerName,
    this.containerQty,
    this.paletteName,
    this.paletteQty,
    this.supersetName,
    this.supersetQty,
    this.setName,
    this.setQty,
    this.unitName,
    this.unitQty,
  });

  QtyInDefaultPackaging.fromJson(Map<String, dynamic> json) {
    containerName = json['containerName'];
    containerQty = json['containerQty'];
    paletteName = json['paletteName'];
    paletteQty = json['paletteQty'];
    supersetName = json['supersetName'];
    supersetQty = json['supersetQty'];
    setName = json['setName'];
    setQty = json['setQty'];
    unitName = json['unitName'];
    unitQty = json['unitQty'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['containerName'] = this.containerName;
    data['containerQty'] = this.containerQty;
    data['paletteName'] = this.paletteName;
    data['paletteQty'] = this.paletteQty;
    data['supersetName'] = this.supersetName;
    data['supersetQty'] = this.supersetQty;
    data['setName'] = this.setName;
    data['setQty'] = this.setQty;
    data['unitName'] = this.unitName;
    data['unitQty'] = this.unitQty;
    return data;
  }
}

class Pivot {
  int? itemId;
  int? warehouseId;
  String? qtyOnHand;

  Pivot({this.itemId, this.warehouseId, this.qtyOnHand});

  Pivot.fromJson(Map<String, dynamic> json) {
    itemId = json['item_id'];
    warehouseId = json['warehouse_id'];
    qtyOnHand = json['qty_on_hand'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['item_id'] = this.itemId;
    data['warehouse_id'] = this.warehouseId;
    data['qty_on_hand'] = this.qtyOnHand;
    return data;
  }
}

class TaxationGroup {
  int? id;
  int? companyId;
  String? code;
  String? name;
  int? active;
  String? createdAt;
  String? updatedAt;
  Null? deletedAt;

  TaxationGroup({
    this.id,
    this.companyId,
    this.code,
    this.name,
    this.active,
    this.createdAt,
    this.updatedAt,
    this.deletedAt,
  });

  TaxationGroup.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    companyId = json['company_id'];
    code = json['code'];
    name = json['name'];
    active = json['active'];
    createdAt = json['created_at'];
    updatedAt = json['updated_at'];
    deletedAt = json['deleted_at'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['company_id'] = this.companyId;
    data['code'] = this.code;
    data['name'] = this.name;
    data['active'] = this.active;
    data['created_at'] = this.createdAt;
    data['updated_at'] = this.updatedAt;
    data['deleted_at'] = this.deletedAt;
    return data;
  }
}
