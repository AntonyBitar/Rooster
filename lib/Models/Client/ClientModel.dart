
import '../ClientAddress/ClientAddressModel.dart';
import '../Company/CompanyModel.dart';
import '../Order/OrderModel.dart';
import '../PaymentTerm/PaymentTermModel.dart';
import '../PriceList/PriceListModel.dart';
import '../Quotation/QuotationModel.dart';
import '../User/UserModel.dart';

class Client {
  int? id;
  Company? company;
  Client? clientCompany;
  User? salesperson;
  User? user;

  String? clientNumber;
  String? type;
  String? name;
  String? country;
  String? city;
  String? state;
  String? zip;
  String? street;
  String? floorAndBuilding;
  String? jobPosition;
  String? phoneCode;
  String? phoneNumber;
  String? mobileCode;
  String? mobileNumber;
  String? reference;
  String? email;
  String? title;
  String? tags;
  String? taxId;
  String? website;
  String? contactType;
  String? contactName;
  String? contactCountry;
  String? contactCity;
  String? contactState;
  String? contactZip;
  String? contactStreet;
  String? contactPhoneCode;
  String? contactPhoneNumber;
  String? contactMobileCode;
  String? contactMobileNumber;
  String? contactEmail;
  PaymentTerm? paymentTerm;
  Pricelist? pricelist;
  double? grantedDiscount;
  bool? active;
  bool? isBlocked;
  bool? showOnPos;
  bool? isCashCustomer;
  bool? autoGeneratedNumber;
  String? note;

  List<Quotation>? quotations;
  List<Order>? orders;
  List<ClientAddress>? clientAddresses;

  Client({
    this.id,
    this.company,
    this.clientCompany,
    this.salesperson,
    this.user,
    this.clientNumber,
    this.type,
    this.name,
    this.country,
    this.city,
    this.state,
    this.zip,
    this.street,
    this.floorAndBuilding,
    this.jobPosition,
    this.phoneCode,
    this.phoneNumber,
    this.mobileCode,
    this.mobileNumber,
    this.reference,
    this.email,
    this.title,
    this.tags,
    this.taxId,
    this.website,
    this.contactType,
    this.contactName,
    this.contactCountry,
    this.contactCity,
    this.contactState,
    this.contactZip,
    this.contactStreet,
    this.contactPhoneCode,
    this.contactPhoneNumber,
    this.contactMobileCode,
    this.contactMobileNumber,
    this.contactEmail,
    this.paymentTerm,
    this.pricelist,
    this.grantedDiscount,
    this.active,
    this.isBlocked,
    this.showOnPos,
    this.isCashCustomer,
    this.autoGeneratedNumber,
    this.note,
    this.quotations,
    this.orders,
    this.clientAddresses,
  });

  factory Client.fromJson(Map<String, dynamic> json) {
    return Client(
      id: json['id'],
      company: json['company'] != null ? Company.fromJson(json['company']) : null,
      clientCompany: json['clientCompany'] != null ? Client.fromJson(json['clientCompany']) : null,
      salesperson: json['salesperson'] != null ? User.fromJson(json['salesperson']) : null,
      user: json['user'] != null ? User.fromJson(json['user']) : null,
      clientNumber: json['client_number'],
      type: json['type'],
      name: json['name'],
      country: json['country'],
      city: json['city'],
      state: json['state'],
      zip: json['zip'],
      street: json['street'],
      floorAndBuilding: json['floor_and_building'],
      jobPosition: json['job_position'],
      phoneCode: json['phone_code'],
      phoneNumber: json['phone_number'],
      mobileCode: json['mobile_code'],
      mobileNumber: json['mobile_number'],
      reference: json['reference'],
      email: json['email'],
      title: json['title'],
      tags: json['tags'],
      taxId: json['tax_id'],
      website: json['website'],
      contactType: json['contact_type'],
      contactName: json['contact_name'],
      contactCountry: json['contact_country'],
      contactCity: json['contact_city'],
      contactState: json['contact_state'],
      contactZip: json['contact_zip'],
      contactStreet: json['contact_street'],
      contactPhoneCode: json['contact_phone_code'],
      contactPhoneNumber: json['contact_phone_number'],
      contactMobileCode: json['contact_mobile_code'],
      contactMobileNumber: json['contact_mobile_number'],
      contactEmail: json['contact_email'],
      paymentTerm: json['paymentTerm'] != null ? PaymentTerm.fromJson(json['paymentTerm']) : null,
      pricelist: json['pricelist'] != null ? Pricelist.fromJson(json['pricelist']) : null,
      grantedDiscount: json['granted_discount'] != null ? double.tryParse(json['granted_discount'].toString()) : null,
      active: json['active'],
      isBlocked: json['is_blocked'],
      showOnPos: json['show_on_pos'],
      isCashCustomer: json['is_cash_customer'],
      autoGeneratedNumber: json['auto_generated_number'],
      note: json['note'],
      quotations: json['quotations'] != null
          ? List<Quotation>.from(json['quotations'].map((x) => Quotation.fromJson(x)))
          : [],
      orders: json['orders'] != null
          ? List<Order>.from(json['orders'].map((x) => Order.fromJson(x)))
          : [],
      clientAddresses: json['clientAddresses'] != null
          ? List<ClientAddress>.from(json['clientAddresses'].map((x) => ClientAddress.fromJson(x)))
          : [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'company': company?.toJson(),
      'clientCompany': clientCompany?.toJson(),
      'salesperson': salesperson?.toJson(),
      'user': user?.toJson(),
      'client_number': clientNumber,
      'type': type,
      'name': name,
      'country': country,
      'city': city,
      'state': state,
      'zip': zip,
      'street': street,
      'floor_and_building': floorAndBuilding,
      'job_position': jobPosition,
      'phone_code': phoneCode,
      'phone_number': phoneNumber,
      'mobile_code': mobileCode,
      'mobile_number': mobileNumber,
      'reference': reference,
      'email': email,
      'title': title,
      'tags': tags,
      'tax_id': taxId,
      'website': website,
      'contact_type': contactType,
      'contact_name': contactName,
      'contact_country': contactCountry,
      'contact_city': contactCity,
      'contact_state': contactState,
      'contact_zip': contactZip,
      'contact_street': contactStreet,
      'contact_phone_code': contactPhoneCode,
      'contact_phone_number': contactPhoneNumber,
      'contact_mobile_code': contactMobileCode,
      'contact_mobile_number': contactMobileNumber,
      'contact_email': contactEmail,
      'paymentTerm': paymentTerm?.toJson(),
      'pricelist': pricelist?.toJson(),
      'granted_discount': grantedDiscount,
      'active': active,
      'is_blocked': isBlocked,
      'show_on_pos': showOnPos,
      'is_cash_customer': isCashCustomer,
      'auto_generated_number': autoGeneratedNumber,
      'note': note,
      'quotations': quotations?.map((x) => x.toJson()).toList(),
      'orders': orders?.map((x) => x.toJson()).toList(),
      'clientAddresses': clientAddresses?.map((x) => x.toJson()).toList(),
    };
  }
}
